generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  phone                   String          @unique
  phoneVerified           DateTime?
  image                   String?
  bannerImage             String?
  password                String?
  role                    UserRole        @default(BUYER)
  bio                     String?
  location                String?
  whatsappNumber          String?
  resetToken              String?
  resetTokenExpiry        DateTime?
  phoneVerificationToken  String?
  phoneVerificationExpiry DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  status                  UserStatus      @default(ACTIVE)
  lastLoginAt             DateTime?
  loginCount              Int             @default(0)
  isVerified              Boolean         @default(false)
  verifiedAt              DateTime?
  suspendedAt             DateTime?
  suspensionReason        String?
  notes                   String?
  tags                    String[]
  accounts                Account[]
  articles                Article[]
  favorites               Favorite[]
  moderationLogs          ModerationLog[] @relation("ModeratorLogs")
  payments                Payment[]
  reviews                 Review[]
  sessions                Session[]
  activities              UserActivity[]
  stats                   UserStats?
  reports                 Report[]        @relation("UserReports")
  reportedContent         Report[]        @relation("ReportedUser")
  moderatedReports        Report[]        @relation("ModeratedReports")
  followers               Follow[]        @relation("UserFollowing")
  following               Follow[]        @relation("UserFollowers")
  feedItems               FeedItem[]      @relation("UserFeedItems")
  notifications           Notification[]  @relation("UserNotifications")
  triggeredNotifications  Notification[]  @relation("ActorNotifications")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Article {
  id              String             @id @default(cuid())
  title           String
  description     String
  price           Float
  images          String
  size            String?
  condition       ArticleCondition
  isAvailable     Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  sellerId        String
  categoryId      String
  brand           String?
  color           String?
  views           Int                @default(0)
  moderationNotes String?
  publishedAt     DateTime?
  rejectionReason String?
  status          ArticleStatus      @default(PENDING_PAYMENT)
  category        Category           @relation(fields: [categoryId], references: [id])
  seller          User               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  promotions      ArticlePromotion[]
  favorites       Favorite[]
  payment         Payment?
  reviews         Review[]
  reports         Report[]           @relation("ReportedArticle")
  feedItems       FeedItem[]         @relation("ArticleFeedItems")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewerId String
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id])
  reports    Report[] @relation("ReportedReview")

  @@unique([reviewerId, articleId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
  articleId     String        @unique
  userId        String
  article       Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id])
}

model ArticlePromotion {
  id        String        @id @default(cuid())
  type      PromotionType
  price     Float
  duration  Int
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  articleId String
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ModerationLog {
  id          String   @id @default(cuid())
  action      String
  notes       String?
  createdAt   DateTime @default(now())
  articleId   String
  moderatorId String
  moderator   User     @relation("ModeratorLogs", fields: [moderatorId], references: [id])
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @unique @default(now())
  users     Int      @default(0)
  articles  Int      @default(0)
  sales     Int      @default(0)
  revenue   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model UserStats {
  id             String   @id @default(cuid())
  userId         String   @unique
  articlesPosted Int      @default(0)
  articlesSold   Int      @default(0)
  totalRevenue   Float    @default(0)
  averageRating  Float    @default(0)
  totalViews     Int      @default(0)
  favoriteCount  Int      @default(0)
  lastActiveAt   DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
  MODERATOR
}

enum ArticleCondition {
  EXCELLENT
  GOOD
  FAIR
}

enum ArticleStatus {
  PENDING_PAYMENT
  PENDING_MODERATION
  APPROVED
  REJECTED
  PUBLISHED
}

enum PaymentMethod {
  WAVE
  ORANGE_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PromotionType {
  FEATURED_HOMEPAGE
  BOOST_SEARCH
  HIGHLIGHT
  EXTENDED_VISIBILITY
}

model Report {
  id          String      @id @default(cuid())
  type        ReportType
  reason      ReportReason
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?
  reporterId  String
  moderatorId String?
  
  // Relations pour le contenu signal√©
  articleId   String?
  userId      String?
  reviewId    String?
  
  // Relations
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id])
  moderator   User?    @relation("ModeratedReports", fields: [moderatorId], references: [id])
  article     Article? @relation("ReportedArticle", fields: [articleId], references: [id], onDelete: Cascade)
  user        User?    @relation("ReportedUser", fields: [userId], references: [id], onDelete: Cascade)
  review      Review?  @relation("ReportedReview", fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

enum ReportType {
  ARTICLE
  USER
  REVIEW
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  FAKE_PRODUCT
  HARASSMENT
  FRAUD
  COPYRIGHT_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FeedItem {
  id        String       @id @default(cuid())
  type      FeedItemType
  userId    String       // L'utilisateur qui a cr√©√© l'action
  articleId String?      // L'article concern√© (si applicable)
  content   String?      // Contenu additionnel (description, etc.)
  createdAt DateTime     @default(now())
  
  user      User     @relation("UserFeedItems", fields: [userId], references: [id], onDelete: Cascade)
  article   Article? @relation("ArticleFeedItems", fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

enum FeedItemType {
  NEW_ARTICLE
  ARTICLE_SOLD
  PROFILE_UPDATE
  ACHIEVEMENT
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String           // L'utilisateur qui re√ßoit la notification
  actorId   String?          // L'utilisateur qui a d√©clench√© la notification
  entityId  String?          // ID de l'entit√© concern√©e (article, etc.)
  entityType String?         // Type d'entit√© (article, user, etc.)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  
  user      User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor     User? @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  NEW_FOLLOWER
  NEW_ARTICLE_FROM_FOLLOWED
  ARTICLE_SOLD
  ARTICLE_LIKED
  SYSTEM
}
