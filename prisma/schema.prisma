generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  phone                   String          @unique
  phoneVerified           DateTime?
  image                   String?
  bannerImage             String?
  password                String?
  role                    UserRole        @default(BUYER)
  bio                     String?
  location                String?
  whatsappNumber          String?
  resetToken              String?
  resetTokenExpiry        DateTime?
  phoneVerificationToken  String?
  phoneVerificationExpiry DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  
  // Nouveaux champs pour la gestion avancée des utilisateurs
  status                  UserStatus      @default(ACTIVE)
  lastLoginAt             DateTime?
  loginCount              Int             @default(0)
  isVerified              Boolean         @default(false)
  verifiedAt              DateTime?
  suspendedAt             DateTime?
  suspensionReason        String?
  notes                   String?
  tags                    String[]
  
  accounts                Account[]
  articles                Article[]
  favorites               Favorite[]
  moderationLogs          ModerationLog[] @relation("ModeratorLogs")
  payments                Payment[]
  reviews                 Review[]
  sessions                Session[]
  activities              UserActivity[]
  stats                   UserStats?
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Article {
  id              String             @id @default(cuid())
  title           String
  description     String
  price           Float
  images          String
  size            String?
  condition       ArticleCondition
  isAvailable     Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  sellerId        String
  categoryId      String
  brand           String?
  color           String?
  views           Int                @default(0)
  moderationNotes String?
  publishedAt     DateTime?
  rejectionReason String?
  status          ArticleStatus      @default(PENDING_PAYMENT)
  category        Category           @relation(fields: [categoryId], references: [id])
  seller          User               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  promotions      ArticlePromotion[]
  favorites       Favorite[]
  payment         Payment?
  reviews         Review[]
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewerId String
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id])

  @@unique([reviewerId, articleId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
  articleId     String        @unique
  userId        String
  article       Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id])
}

model ArticlePromotion {
  id        String        @id @default(cuid())
  type      PromotionType
  price     Float
  duration  Int
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  articleId String
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ModerationLog {
  id          String   @id @default(cuid())
  action      String
  notes       String?
  createdAt   DateTime @default(now())
  articleId   String
  moderatorId String
  moderator   User     @relation("ModeratorLogs", fields: [moderatorId], references: [id])
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum ArticleCondition {
  EXCELLENT
  GOOD
  FAIR
}

enum ArticleStatus {
  PENDING_PAYMENT
  PENDING_MODERATION
  APPROVED
  REJECTED
  PUBLISHED
}

enum PaymentMethod {
  WAVE
  ORANGE_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PromotionType {
  FEATURED_HOMEPAGE
  BOOST_SEARCH
  HIGHLIGHT
  EXTENDED_VISIBILITY
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

// Modèles pour l'analytics et la gestion avancée des utilisateurs
model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @unique @default(now())
  users     Int      @default(0)
  articles  Int      @default(0)
  sales     Int      @default(0)
  revenue   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model UserStats {
  id              String   @id @default(cuid())
  userId          String   @unique
  articlesPosted  Int      @default(0)
  articlesSold    Int      @default(0)
  totalRevenue    Float    @default(0)
  averageRating   Float    @default(0)
  totalViews      Int      @default(0)
  favoriteCount   Int      @default(0)
  lastActiveAt    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
