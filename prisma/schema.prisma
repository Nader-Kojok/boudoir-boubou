// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  phone         String    @unique
  phoneVerified DateTime?
  image         String?
  bannerImage   String?
  password      String?
  role          UserRole  @default(BUYER)
  bio           String?
  location      String?
  whatsappNumber String?
  resetToken    String?
  resetTokenExpiry DateTime?
  phoneVerificationToken String?
  phoneVerificationExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // Application relations
  articles  Article[]
  reviews   Review[]
  favorites Favorite[]
  payments  Payment[]
  moderationLogs ModerationLog[] @relation("ModeratorLogs")

}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  articles Article[]
}

model Article {
  id          String          @id @default(cuid())
  title       String
  description String
  price       Float
  images      String // JSON string of image URLs
  size        String?
  brand       String?
  color       String?
  condition   ArticleCondition
  isAvailable Boolean         @default(true)
  views       Int             @default(0)
  status      ArticleStatus   @default(PENDING_PAYMENT)
  moderationNotes String?
  rejectionReason String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  publishedAt DateTime?

  // Relations
  sellerId   String
  seller     User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])

  reviews    Review[]
  favorites  Favorite[]
  payment    Payment?
  promotions ArticlePromotion[]

}



model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviewerId String
  reviewer   User    @relation(fields: [reviewerId], references: [id])
  articleId  String
  article    Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, articleId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}



// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum ArticleCondition {
  EXCELLENT
  GOOD
  FAIR
}

enum ArticleStatus {
  PENDING_PAYMENT
  PENDING_MODERATION
  APPROVED
  REJECTED
  PUBLISHED
}

enum PaymentMethod {
  WAVE
  ORANGE_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PromotionType {
  FEATURED_HOMEPAGE
  BOOST_SEARCH
  HIGHLIGHT
  EXTENDED_VISIBILITY
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?

  // Relations
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model ArticlePromotion {
  id        String        @id @default(cuid())
  type      PromotionType
  price     Float
  duration  Int // en jours
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ModerationLog {
  id        String   @id @default(cuid())
  action    String // APPROVED, REJECTED, PENDING
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  articleId   String
  moderatorId String
  moderator   User   @relation("ModeratorLogs", fields: [moderatorId], references: [id])
}
